/*
 * generated by Xtext 2.12.0
 */
package org.myasm.assembly.compiler.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.myasm.assembly.compiler.myAsm.ClassDeclaration
import org.myasm.assembly.compiler.myAsm.VariableDeclarator
import org.myasm.assembly.compiler.myAsm.StringLiteral
import java.util.HashMap
import org.myasm.assembly.compiler.myAsm.Literal
import org.myasm.assembly.compiler.myAsm.VariableInitializer
import org.myasm.assembly.compiler.myAsm.Expression
import org.myasm.assembly.compiler.myAsm.NumericExpression
import org.myasm.assembly.compiler.myAsm.BitExpression
import org.myasm.assembly.compiler.myAsm.LogicalExpression
import org.myasm.assembly.compiler.myAsm.TestingExpression
import org.myasm.assembly.compiler.myAsm.PrefixNumericExpression
import org.myasm.assembly.compiler.myAsm.PosfixNumericExpression
import org.myasm.assembly.compiler.myAsm.CastExpression
import org.myasm.assembly.compiler.myAsm.PrimaryExpression
import org.myasm.assembly.compiler.myAsm.Primary
import org.myasm.assembly.compiler.myAsm.IntegerLiteral
import org.myasm.assembly.compiler.myAsm.BooleanLiteral

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyAsmGenerator extends AbstractGenerator {
    private HashMap<String, String> atributos = new HashMap<String, String>();
    Resource resource;
    private int stringCounter = 0;

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        this.resource = resource;
        for (e : resource.allContents.toIterable.filter(ClassDeclaration)) {
            var String nomeDoArquivo = e.name + ".asm";
            fsa.generateFile(nomeDoArquivo, e.compile());
        }
    }

    def compile(ClassDeclaration classDeclaration) '''
		; Programa «classDeclaration.name»
		; Data
		«classDeclaration.compile2()»
		; Codigo
		«//PROCEDURES
    »
    ; Main
    «//JAVA MAIN
    »
    ret; Fim do programa
'''

    def compile2(ClassDeclaration classDeclaration) '''
		«FOR e : resource.allContents.toIterable.filter(VariableDeclarator)»
			«geraAssemblyVariableDeclarator(e)»
		«ENDFOR»
	'''

    def geraAssemblyVariableDeclarator(VariableDeclarator variable) {
        var String id = variable.facade.name;
        var Expression initializer = variable.definition as Expression;
        System.out.println("Initializer: " + initializer);
        var String linhas = String.valueOf(evaluateExpression(initializer));
        var String store = "ST " + id + ",R0";
        var String comentario = "; Atribuindo variavel "+id;
        return  comentario + "\n"+linhas + "\n" + store ;

    }
    def evaluateExpression(Expression expression) {
        evaluateExpression(expression,0);
    }

    def evaluateExpression(Expression expression, int counter) {
        if (expression instanceof NumericExpression) {
            var String op = expression.operator;
            var String leftExpression = evaluateExpression(expression.left,0) as String+"\n";
            var String rightExpression = evaluateExpression(expression.right,1) as String+"\n";
            var String operation = leftExpression + rightExpression + returnOperator(op)+ " R0,R0,R1";
            return operation
        }
        if (expression instanceof TestingExpression) {
            var String op = expression.operator;
            var Literal esquerda = ((expression.left as CastExpression).expression as Literal);
            var Literal direita = ((expression.right as CastExpression).expression as Literal)
            if (op !== null) {
                if (esquerda instanceof IntegerLiteral) {
                    return testaIntegerLiteral(esquerda, direita as IntegerLiteral, op);
                } else {
                    return testaBooleanLiteral(esquerda as BooleanLiteral, direita as BooleanLiteral, op);
                }
            } else {
                if (esquerda instanceof IntegerLiteral) {
                    return "LD R"+(counter)+"," + esquerda.value;
                } else if (esquerda instanceof BooleanLiteral) {
                    return "LD R"+(counter)+"," + b2s(esquerda.value);
                } else {
                    var String retorno = "__STRING_" + stringCounter + " DB " + "'" +
                            (esquerda as StringLiteral).value + "',0\n" +
                            "__STRING_" + stringCounter + " EQU $- __STRING_" +stringCounter+
                            "\nLD R0,__STRING_" + stringCounter;
                    stringCounter++;
                    return retorno;
                }
            }
        }
        if (expression instanceof CastExpression) {
            var Literal esquerda = expression.expression as Literal;
            if (esquerda instanceof IntegerLiteral) {
                return "LD R"+(counter)+"," + esquerda.value;
            } else if (esquerda instanceof BooleanLiteral) {
                return "LD R"+(counter)+"," + b2s(esquerda.value);
            } else {
                var String retorno = "__STRING_" + stringCounter + " DB " + "'" +
                        (esquerda as StringLiteral).value + "',0\n" +
                        "__STRING_" + stringCounter + " EQU $- __STRING_" +stringCounter+
                        "\nLD R0,__STRING_" + stringCounter;
                stringCounter++;
                return retorno;
            }
        }
    }

    def testaBooleanLiteral(BooleanLiteral literal, BooleanLiteral literal2, String op) {
        if (op.equals("==")) {
            return "LD R0,"+b2s(literal.value == literal2.value);
        } else if (op.equals("!=")) {
            return "LD R0,"+b2s(literal.value != literal2.value);
        }
    }

    def testaIntegerLiteral(IntegerLiteral literal, IntegerLiteral literal2, String op) {
        if (op.equals(">")) {
            return "LD R0,"+b2s(literal.value > literal2.value);
        } else if (op.equals(">=")) {
            return "LD R0,"+b2s(literal.value >= literal2.value);
        } else if (op.equals("<")) {
            return "LD R0,"+b2s(literal.value < literal2.value);
        } else if (op.equals("<=")) {
            return "LD R0,"+b2s(literal.value <= literal2.value);
        }
    }

    def returnOperator(String op) {
        if (op.equals("+")) {
            return "ADD";
        }
        if (op.equals("-")) {
            return "SUB";
        }
        if (op.equals("+")) {
            return "MUL";
        }
        if (op.equals("+")) {
            return "DIV";
        }
        if (op.equals("==")) {
            return "BEQ";
        }
        if (op.equals("!=")) {
            return "BNE";
        }
        if (op.equals(">")) {
            return "BGTZ";
        }
        if (op.equals(">=")) {
            return "BGEZ";
        }
        if (op.equals("<")) {
            return "BLTZ";
        }
        if (op.equals("<=")) {
            return "BLEZ";
        }
    }

    def b2s(boolean b) {
        if (b == true) {
            return 1;
        }
        if (b == false) {
            return 0;
        }
    }

    def b2s(String b) {
        if (b == "true") {
            return 1;
        }
        if (b == "false") {
            return 0;
        }
    }

}
