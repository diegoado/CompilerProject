grammar org.myasm.assembly.compiler.MyAsm hidden(WS, DOC_COMMENT, SL_COMMENT)

generate myAsm "http://www.myasm.org/assembly/compiler/MyAsm"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// ===============================================
// ===              Java Program               ===
// ===============================================

Program:
	program=CompilationUnit
;

CompilationUnit:
    PackageDeclaration? ImportDeclaration* TypeDeclaration*
;

// ===============================================
// ===               Declarations              ===
// ===============================================

PackageDeclaration:
    => PACKAGE PackageName ";"
;

ImportDeclaration:
    => IMPORT ( PackageName ".*" | TypeName ) ";"
;

TypeDeclaration:
    ClassDeclaration | InterfaceDeclaration | ";"
;

ClassDeclaration:
    ClassModifier* CLASS IDENTIFIER Inheritance? Interfaces? ClassBody
;

ClassModifier:
    PUBLIC | ABSTRACT | FINAL
;

Inheritance:
    EXTENDS ClassType
;

Interfaces:
    IMPLEMENTS InterfaceTypeList
;

InterfaceTypeList:
    InterfaceType
    (=> "," InterfaceType )*
;

ClassBody:
    "{" ClassBodyDeclaration* "}"
;

ClassBodyDeclaration:
    ClassMemberDeclaration | StaticInitializer | ConstructorDeclaration
;

ClassMemberDeclaration:
    FieldDeclaration | MethodDeclaration
;

StaticInitializer:
    STATIC Block
;

ConstructorDeclaration:
    ConstructorModifier* ConstructorDeclarator Exceptions? ConstructorBody
;

ConstructorModifier:
    PUBLIC | PROTECTED | PRIVATE
;

ConstructorDeclarator:
    SimpleTypeName "(" FormalParameterList* ")"
;

FormalParameterList:
    FormalParameter
    (=> "," FormalParameter )*
;

FormalParameter:
    Type VariableDeclaratorId
;

Exceptions:
    THROWS ClassTypeList
;

ClassTypeList:
    ClassType
    (=> "," ClassType )*
;

ConstructorBody:
    "{" ExplicitConstructorInvocation? BlockStatement* "}"
;

ExplicitConstructorInvocation:
    ( THIS "(" ArgumentList? ")" ) | ( SUPER "(" ArgumentList? ")" )
;

FieldDeclaration:
    FieldModifier* Type VariableDeclarators ";"
;

FieldModifier:
    PUBLIC | PROTECTED | PRIVATE | STATIC | FINAL | TRANSIENT | VOLATILE
;

VariableDeclarators:
    VariableDeclarator
    (=> "," VariableDeclarator )*
;

VariableDeclarator:
    VariableDeclaratorId
    ( "=" VariableInitializer )?
;

VariableDeclaratorId:
    IDENTIFIER ( "[]" )*
;

VariableInitializer:
    Expression | ArrayInitializer
;

MethodDeclaration:
    MethodHeader Block
;

MethodHeader:
    MethodModifier* ResultType MethodDeclarator Exceptions?
;

ResultType:
    Type | VOID
;

MethodModifier:
    PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | FINAL | SYNCHRONIZED | NATIVE
;

MethodDeclarator:
    IDENTIFIER "(" FormalParameterList? ")"
;

InterfaceDeclaration:
    InterfaceModifier* INTERFACE IDENTIFIER ExtendsInterfaces? InterfaceBody
;

InterfaceModifier:
    PUBLIC | ABSTRACT
;

ExtendsInterfaces:
    EXTENDS InterfaceType ( "," InterfaceType )*
;

InterfaceBody:
    "{" InterfaceMemberDeclaration* "}"
;

InterfaceMemberDeclaration:
    ConstantDeclaration | AbstractMethodDeclaration
;

ConstantDeclaration:
    ConstantModifiers Type VariableDeclarator
;

ConstantModifiers:
    PUBLIC | STATIC | FINAL
;

AbstractMethodDeclaration:
    AbstractMethodModifier* ResultType MethodDeclarator Exceptions? ";"
;

AbstractMethodModifier:
    PUBLIC | ABSTRACT
;

ArrayInitializer:
    "{" VariableInitializers? ","? "}"
;

VariableInitializers:
    VariableInitializer
    (=> "," VariableInitializer )*
;

// ===============================================
// ===                  Types                  ===
// ===============================================

Type:
    ( PrimitiveType | ReferenceType ) ArrayType*
;

PrimitiveType:
    NumericType | BOOLEAN
;

NumericType:
    IntegralType | FloatingType
;

IntegralType:
    BYTE | SHORT | INT | LONG | CHAR
;

FloatingType:
    FLOAT | DOUBLE
;

ReferenceType:
    TypeName
;

ClassType:
    TypeName
;

InterfaceType:
    TypeName
;

ArrayType:
    "[]"
;

// ===============================================
// ===          Blocks and Commands            ===
// ===============================================

Block:
    "{" BlockStatement* "}"
;

BlockStatement:
    LocalVariableDeclarationStatement | Statement
;

LocalVariableDeclarationStatement:
    LocalVariableDeclaration ";"
;

LocalVariableDeclaration:
    Type VariableDeclarators
;

Statement:
    StatementWithoutTrailingSubstatement
    | LabeledStatement
    | IfStatement
    | WhileStatement
    | ForStatement
;

StatementWithoutTrailingSubstatement:
    Block
    | EmptyStatement
    | ExpressionStatement
    | SwitchStatement
    | DoStatement
    | BreakStatement
    | ContinueStatement
    | ReturnStatement
    | SynchronizedStatement
    | ThrowsStatement
    | TryStatement
;

EmptyStatement:
    ";"
;

LabeledStatement:
    IDENTIFIER ":" Statement
;

ExpressionStatement:
    StatementExpression ";"
;

StatementExpression:
     => Assignment
    | PreIncrementExpression
    | PreDecrementExpression
    |=> PostfixExpression
    |=> MethodInvocation
    |=> ClassInstanceCreationExpression
;

IfStatement:
    IF "(" Expression ")" Statement
    (=> ELSE Statement )?
;

SwitchStatement:
    SWITCH "(" Expression ")" "{"
    ( ( CASE ConstantExpression ":" ) | ( DEFAULT ":" ) | BlockStatement )*
    "}"
;

WhileStatement:
    WHILE "(" Expression ")" Statement
;

DoStatement:
    DO Statement WHILE "(" Expression ")" ";"
;

ForStatement:
    FOR "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement
;

ForInit:
    StatementExpressionList | LocalVariableDeclaration
;

ForUpdate:
    StatementExpressionList
;

StatementExpressionList:
    StatementExpression
    (=> "," StatementExpression )*
;

BreakStatement:
    BREAK IDENTIFIER? ";"
;

ContinueStatement:
    CONTINUE IDENTIFIER? ";"
;

ReturnStatement:
    RETURN Expression? ";"
;

ThrowsStatement:
    THROW Expression ";"
;

SynchronizedStatement:
    SYNCHRONIZED "(" Expression ")" Block
;

TryStatement:
    TRY Block
    (=> CATCH "(" FormalParameter ")" Block )*
    (=> FINALLY Block )?
;

// ===============================================
// ===                 Expression              ===
// ===============================================

ConstantExpression:
    Expression
;

Expression:
    AssignmentExpression
;

AssignmentExpression:
    => ConditionalExpression | Assignment
;

Assignment:
    LeftHandSide AssignmentOperator AssignmentExpression
;

LeftHandSide:
    => ExpressionName | => FieldAccess | => ArrayAccess
;

AssignmentOperator:
    "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
;

ConditionalExpression:
    ConditionalOrExpression
    (=> "?" Expression ":" ConditionalExpression )?
;

ConditionalOrExpression:
    ConditionalAndExpression
    (=> "||" ConditionalAndExpression )*
;

ConditionalAndExpression:
    InclusiveOrExpression
    (=> "&&" InclusiveOrExpression )*
;

InclusiveOrExpression:
    ExclusiveOrExpression
    (=> "|" ExclusiveOrExpression )*
;

ExclusiveOrExpression:
    AndExpression
    (=> "^" AndExpression )*
;

AndExpression:
    EqualityExpression
    (=> "&" EqualityExpression )*
;

EqualityExpression:
    RelationalExpression
    (=> ( "==" | "!=" ) RelationalExpression )*
;

RelationalExpression:
    ShiftExpression
    (=> ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression ) | => ( INSTANCEOF ReferenceType ) )*
;

ShiftExpression:
    AdditiveExpression
    (=> ( "<<" | ">>" | ">>>" ) AdditiveExpression )*
;

AdditiveExpression:
    MultiplicativeExpression
    (=> ( "+" | "-" ) MultiplicativeExpression )*
;

MultiplicativeExpression:
    NoArrayExpression
    (=> ( "*" | "/" | "%" ) NoArrayExpression )*
;

CastExpression:
     => "(" PrimitiveType ")" NoArrayExpression
    |=> "(" ReferenceType ")" NoArrayExpressionWithoutMinus
;

NoArrayExpression:
    PreIncrementExpression | PreDecrementExpression
    | "+" NoArrayExpression
    | "-" NoArrayExpression
    | NoArrayExpressionWithoutMinus
;

PreDecrementExpression:
    "--" NoArrayExpression
;

PreIncrementExpression:
    "++" NoArrayExpression
;

NoArrayExpressionWithoutMinus:
    => PostfixExpression
    | "~" NoArrayExpression | "!" NoArrayExpression | CastExpression
;

PostfixExpression:
    ( => Primary | ExpressionName ) ( "--" | "++" )*
;

MethodInvocation:
      ( MethodName "(" ArgumentList? ")" )
    | => ( Primary "." IDENTIFIER "(" ArgumentList? ")" )
    | => ( SUPER   "." IDENTIFIER "(" ArgumentList? ")" )
;

FieldAccess:
    ( Primary "." IDENTIFIER ) | => ( SUPER "." IDENTIFIER )
;

Primary:
    => PrimaryNoNewArray | PrimaryNewArray
;

PrimaryNoNewArray:
    ( Literal
    | THIS
    | ( "(" Expression ")" )
    | ClassInstanceCreationExpression
    | SUPER
    | ( MethodName "(" ArgumentList? ")" )
    | ( ExpressionName DimentionsExpression ))
    => ( ( "." IDENTIFIER ( "(" ArgumentList? ")" )? ) | DimentionsExpression )*
;

PrimaryNewArray:
    ArrayCreationExpression
    => ( ( "." IDENTIFIER ( "(" ArgumentList? ")" )? ) | DimentionsExpression )*
;

ClassInstanceCreationExpression:
    NEW ClassType "(" ArgumentList? ")"
;

ArgumentList:
    Expression (=> "," Expression )*
;

ArrayCreationExpression:
    NEW ( PrimitiveType | TypeName ) => DimentionsExpression+ ArrayType*
;

DimentionsExpression:
    "[" Expression "]"
;

ArrayAccess:
    ( => ExpressionName | PrimaryNoNewArray ) DimentionsExpression
;

// ===============================================
// ===                 Tokens                  ===
// ===============================================

PackageName:
    IDENTIFIER
    (=> "." IDENTIFIER )*
;

TypeName:
    IDENTIFIER
    (=> "." IDENTIFIER )*
;

SimpleTypeName:
    IDENTIFIER
;

ExpressionName:
    IDENTIFIER
    (=> "." IDENTIFIER )*
;

MethodName:
    IDENTIFIER
    (=> "." IDENTIFIER )*
;

AmbiguousName:
    IDENTIFIER
    ( => "." IDENTIFIER )*
;

Literal:
    IntegerLiteral | FloatingLiteral | BooleanLiteral | CHARACTER_LITERAL | STRING_LITERAL | NULL
;

IntegerLiteral:
    ( DECIMAL_NUMERAL | HEX_NUMERAL | OCTAL_NUMERAL ) ( "l" | "L" )?
;

FloatingLiteral:
    ( ( DECIMAL_NUMERAL "." DECIMAL_NUMERAL* ) | ( "." DECIMAL_NUMERAL ) | DECIMAL_NUMERAL )
    FLOAT_PART_COMPLEMENT
;

BooleanLiteral:
    TRUE | FALSE
;

// ===============================================
// ===                Terminals                ===
// ===============================================

terminal DOC_COMMENT:
    "/*" -> "*/"
;

terminal SL_COMMENT:
    "//" !( "\n" | "\r" )* ( "\r"? "\n" )?
;

terminal WS:
    ( " " | "\t" | "\r" | "\n" )+
;

terminal ABSTRACT:
    "abstract"
;

terminal AMPERSAND:
    "ampersand"
;

terminal BOOLEAN:
    "boolean"
;

terminal BREAK:
    "break"
;

terminal BYTE:
    "byte"
;

terminal CASE:
    "case"
;

terminal CATCH:
    "catch"
;

terminal CHAR:
    "char"
;

terminal CLASS:
    "class"
;

terminal CONST:
    "const"
;

terminal CONTINUE:
    "continue"
;

terminal DEFAULT:
    "default"
;

terminal DO:
    "do"
;

terminal DOUBLE:
    "double"
;

terminal ELSE:
    "else"
;

terminal EXTENDS:
    "extends"
;

terminal FALSE:
    "false"
;

terminal FINAL:
    "final"
;

terminal FINALLY:
    "finally"
;

terminal FLOAT:
    "float"
;

terminal FOR:
    "for"
;

terminal GOTO:
    "goto"
;

terminal IF:
    "if"
;

terminal IMPLEMENTS:
    "implements"
;

terminal IMPORT:
    "import"
;

terminal INSTANCEOF:
    "instanceof"
;

terminal INT:
    "int"
;

terminal INTERFACE:
    "interface"
;

terminal LONG:
    "long"
;

terminal NATIVE:
    "native"
;

terminal NEW:
    "new"
;

terminal NULL:
    "null"
;

terminal PACKAGE:
    "package"
;

terminal PRIVATE:
    "private"
;

terminal PROTECTED:
    "protected";

terminal PUBLIC:
    "public"
;

terminal RETURN:
    "return"
;

terminal SHORT:
    "short"
;

terminal STATIC:
    "static"
;

terminal SUPER:
    "super"
;

terminal SWITCH:
    "switch"
;

terminal SYNCHRONIZED:
    "synchronized"
;

terminal THIS:
    "this"
;

terminal THREADSAFE:
    "threadsafe"
;

terminal THROW:
    "throw"
;

terminal THROWS:
    "throws"
;

terminal TRANSIENT:
    "transient"
;

terminal TRY:
    "try"
;

terminal TRUE:
    "true"
;

terminal VOID:
    "void"
;

terminal VOLATILE:
    "volatile"
;

terminal WHILE:
    "while"
;

terminal IDENTIFIER:
    ( "a".."z" | "A".."Z" |"_" |"$" )
    ( "a".."z" | "A".."Z" |"_" |"$" | "0".."9" )*
;

terminal DECIMAL_NUMERAL:
    "0" | ( NON_ZERO_DIGIT DIGIT* )
;

terminal fragment DIGIT:
    "0" | NON_ZERO_DIGIT
;

terminal fragment NON_ZERO_DIGIT:
    "1" .. "9"
;

terminal HEX_NUMERAL:
    ( "0x" | "0X" ) HEX_DIGIT+
;

terminal fragment HEX_DIGIT:
    "0" .. "9" | "a" .. "f" | "A" .. "F"
;

terminal OCTAL_NUMERAL:
    "0" OCTAL_DIGIT+
;

terminal fragment OCTAL_DIGIT:
    "0" .. "7"
;

terminal FLOAT_PART_COMPLEMENT:
    EXPONENT_PART? FLOAT_TYPE_SUFFIX?
;

terminal fragment EXPONENT_PART:
    EXPONENT_INDICATOR SIGNED_INTEGER
;

terminal fragment EXPONENT_INDICATOR:
    "e" | "E"
;

terminal fragment SIGNED_INTEGER:
    ( "+" | "-" ) DIGIT+
;

terminal fragment FLOAT_TYPE_SUFFIX:
    "f" | "F" | "d" | "D"
;

terminal CHARACTER_LITERAL:
    "'" . | !( "\\" | "'" ) "'"
;

terminal STRING_LITERAL:
    '"' ( "\\" . | !( "\\" | '"' ) )* '"'
;